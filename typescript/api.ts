// tslint:disable
/**
 * 勉強用個人アプリ
 * フロントアプリ -> アプリサーバ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    status: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * 
     * @type {Array<ValidationInfo>}
     * @memberof ModelError
     */
    validationsInfos?: Array<ValidationInfo>;
}
/**
 * 商品作成パラメータ
 * @export
 * @interface ProductParameter
 */
export interface ProductParameter {
    /**
     * 商品名
     * @type {string}
     * @memberof ProductParameter
     */
    name: string;
    /**
     * 値段
     * @type {number}
     * @memberof ProductParameter
     */
    price: number;
    /**
     * 商品説明
     * @type {string}
     * @memberof ProductParameter
     */
    explanation: string;
}
/**
 * 
 * @export
 * @interface Products
 */
export interface Products {
    /**
     * 商品名
     * @type {string}
     * @memberof Products
     */
    name: string;
    /**
     * 値段
     * @type {number}
     * @memberof Products
     */
    price: number;
    /**
     * 商品説明
     * @type {string}
     * @memberof Products
     */
    explanation: string;
    /**
     * 商品画像
     * @type {string}
     * @memberof Products
     */
    productImageUrl: string;
}
/**
 * アップロードした商品画像の情報
 * @export
 * @interface UploadedProductImage
 */
export interface UploadedProductImage {
    /**
     * 
     * @type {string}
     * @memberof UploadedProductImage
     */
    productImageUrl?: string;
}
/**
 * 
 * @export
 * @interface ValidationInfo
 */
export interface ValidationInfo {
    /**
     * 
     * @type {string}
     * @memberof ValidationInfo
     */
    field: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationInfo
     */
    rejectedValue: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationInfo
     */
    message: string;
}

/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 商品削除
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductProductIdDelete: async (productId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling apiV1ProductProductIdDelete.');
            }
            const localVarPath = `/api/v1/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品詳細
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductProductIdGet: async (productId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling apiV1ProductProductIdGet.');
            }
            const localVarPath = `/api/v1/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品編集
         * @param {string} productId 商品ID
         * @param {ProductParameter} [productParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductProductIdPut: async (productId: string, productParameter?: ProductParameter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling apiV1ProductProductIdPut.');
            }
            const localVarPath = `/api/v1/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof productParameter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productParameter !== undefined ? productParameter : {}) : (productParameter || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品画像アップロード
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductsImagePost: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products/image`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品投稿
         * @param {ProductParameter} [productParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductsPost: async (productParameter?: ProductParameter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof productParameter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productParameter !== undefined ? productParameter : {}) : (productParameter || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商品検索
         * @param {string} keyword 検索キーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductsSearchGet: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling apiV1ProductsSearchGet.');
            }
            const localVarPath = `/api/v1/products/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 商品削除
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProductProductIdDelete(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).apiV1ProductProductIdDelete(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 商品詳細
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProductProductIdGet(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).apiV1ProductProductIdGet(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 商品編集
         * @param {string} productId 商品ID
         * @param {ProductParameter} [productParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProductProductIdPut(productId: string, productParameter?: ProductParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).apiV1ProductProductIdPut(productId, productParameter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 商品一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProductsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).apiV1ProductsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 商品画像アップロード
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProductsImagePost(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadedProductImage>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).apiV1ProductsImagePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 商品投稿
         * @param {ProductParameter} [productParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProductsPost(productParameter?: ProductParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).apiV1ProductsPost(productParameter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 商品検索
         * @param {string} keyword 検索キーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProductsSearchGet(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products>> {
            const localVarAxiosArgs = await ProductApiAxiosParamCreator(configuration).apiV1ProductsSearchGet(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 商品削除
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductProductIdDelete(productId: string, options?: any): AxiosPromise<void> {
            return ProductApiFp(configuration).apiV1ProductProductIdDelete(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品詳細
         * @param {string} productId 商品ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductProductIdGet(productId: string, options?: any): AxiosPromise<Products> {
            return ProductApiFp(configuration).apiV1ProductProductIdGet(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品編集
         * @param {string} productId 商品ID
         * @param {ProductParameter} [productParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductProductIdPut(productId: string, productParameter?: ProductParameter, options?: any): AxiosPromise<void> {
            return ProductApiFp(configuration).apiV1ProductProductIdPut(productId, productParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductsGet(options?: any): AxiosPromise<Products> {
            return ProductApiFp(configuration).apiV1ProductsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品画像アップロード
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductsImagePost(body?: string, options?: any): AxiosPromise<UploadedProductImage> {
            return ProductApiFp(configuration).apiV1ProductsImagePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品投稿
         * @param {ProductParameter} [productParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductsPost(productParameter?: ProductParameter, options?: any): AxiosPromise<void> {
            return ProductApiFp(configuration).apiV1ProductsPost(productParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商品検索
         * @param {string} keyword 検索キーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProductsSearchGet(keyword: string, options?: any): AxiosPromise<Products> {
            return ProductApiFp(configuration).apiV1ProductsSearchGet(keyword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary 商品削除
     * @param {string} productId 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiV1ProductProductIdDelete(productId: string, options?: any) {
        return ProductApiFp(this.configuration).apiV1ProductProductIdDelete(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品詳細
     * @param {string} productId 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiV1ProductProductIdGet(productId: string, options?: any) {
        return ProductApiFp(this.configuration).apiV1ProductProductIdGet(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品編集
     * @param {string} productId 商品ID
     * @param {ProductParameter} [productParameter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiV1ProductProductIdPut(productId: string, productParameter?: ProductParameter, options?: any) {
        return ProductApiFp(this.configuration).apiV1ProductProductIdPut(productId, productParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品一覧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiV1ProductsGet(options?: any) {
        return ProductApiFp(this.configuration).apiV1ProductsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品画像アップロード
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiV1ProductsImagePost(body?: string, options?: any) {
        return ProductApiFp(this.configuration).apiV1ProductsImagePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品投稿
     * @param {ProductParameter} [productParameter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiV1ProductsPost(productParameter?: ProductParameter, options?: any) {
        return ProductApiFp(this.configuration).apiV1ProductsPost(productParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商品検索
     * @param {string} keyword 検索キーワード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiV1ProductsSearchGet(keyword: string, options?: any) {
        return ProductApiFp(this.configuration).apiV1ProductsSearchGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

}


